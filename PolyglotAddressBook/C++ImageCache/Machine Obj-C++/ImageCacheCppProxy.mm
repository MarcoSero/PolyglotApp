// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from image_cache.djinni

#import "ImageCacheCppProxy+Private.h"
#import "DJIError.h"
#import "ImageCache.h"
#import "ImageCacheCppProxy+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@implementation ImageCacheCppProxy

- (id)initWithCpp:(const std::shared_ptr<ImageCache> &)cppRef
{
    if (self = [super init]) {
        _cppRef = cppRef;
    }
    return self;
}

- (void)dealloc
{
    djinni::DbxCppWrapperCache<ImageCache> & cache = djinni::DbxCppWrapperCache<ImageCache>::getInstance();
    cache.remove(_cppRef);
}

+ (id)imageCacheWithCpp:(const std::shared_ptr<ImageCache> &)cppRef
{
    djinni::DbxCppWrapperCache<ImageCache> & cache = djinni::DbxCppWrapperCache<ImageCache>::getInstance();
    return cache.get(cppRef, [] (const std::shared_ptr<ImageCache> & p) { return [[ImageCacheCppProxy alloc] initWithCpp:p]; });
}

+ (id <ImageCache>)createWithPath:(NSString *)path {
    try {
        std::string cppPath([path UTF8String], [path lengthOfBytesUsingEncoding:NSUTF8StringEncoding]);
        std::shared_ptr<ImageCache> cppRet = ImageCache::create_with_path(std::move(cppPath));
        id <ImageCache> objcRet = [ImageCacheCppProxy imageCacheWithCpp:cppRet];
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NSString *)cachePath {
    try {
        std::string cppRet = _cppRef->cache_path();
        NSString *objcRet = [[NSString alloc] initWithBytes:cppRet.data()
                length:cppRet.length()
                encoding:NSUTF8StringEncoding];
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NSData *)imageForKey:(NSString *)key {
    try {
        std::string cppKey([key UTF8String], [key lengthOfBytesUsingEncoding:NSUTF8StringEncoding]);
        std::vector<uint8_t> cppRet = _cppRef->image_for_key(std::move(cppKey));
        NSData *objcRet = [NSData dataWithBytes:(&cppRet[0]) length:(cppRet.size())];
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)saveImageForKey:(NSString *)key imageData:(NSData *)imageData {
    try {
        std::string cppKey([key UTF8String], [key lengthOfBytesUsingEncoding:NSUTF8StringEncoding]);
        std::vector<uint8_t> cppImageData([imageData length]);
        [imageData getBytes:(static_cast<void *>(cppImageData.data())) length:[imageData length]];
        _cppRef->save_image_for_key(std::move(cppKey), std::move(cppImageData));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

@end
